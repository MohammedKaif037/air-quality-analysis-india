# Air Quality Analysis in Indian Cities
# Project: Examining Air Quality in Indian Cities

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# Set up plotting style
plt.style.use('default')
sns.set_palette("husl")

print("üåç Air Quality Analysis in Indian Cities")
print("=" * 50)

# Sample Air Quality Data for Indian Cities (Replace with real data from CPCB)
# This simulates data from Central Pollution Control Board (CPCB) website or platforms like OpenAQ
data = {
    'city': ['Delhi', 'Mumbai', 'Kolkata', 'Chennai', 'Bangalore', 'Hyderabad', 'Pune', 'Ahmedabad', 'Jaipur', 'Lucknow'] * 36,
    'date': pd.to_datetime(['2023-01-15', '2023-01-15', '2023-01-15', '2023-01-15', '2023-01-15', '2023-01-15', '2023-01-15', '2023-01-15', '2023-01-15', '2023-01-15',
                           '2023-02-15', '2023-02-15', '2023-02-15', '2023-02-15', '2023-02-15', '2023-02-15', '2023-02-15', '2023-02-15', '2023-02-15', '2023-02-15',
                           '2023-03-15', '2023-03-15', '2023-03-15', '2023-03-15', '2023-03-15', '2023-03-15', '2023-03-15', '2023-03-15', '2023-03-15', '2023-03-15'] * 12),
    'pm25': np.random.randint(50, 300, 360),  # PM2.5 levels
    'no2': np.random.randint(20, 150, 360),   # NO2 levels  
    'so2': np.random.randint(10, 80, 360)     # SO2 levels
}

# Create DataFrame
air_quality_df = pd.DataFrame(data)

# Add seasonal variation to make data more realistic
air_quality_df['month'] = air_quality_df['date'].dt.month
# Winter months (Dec, Jan, Feb) have higher pollution
winter_mask = air_quality_df['month'].isin([12, 1, 2])
air_quality_df.loc[winter_mask, 'pm25'] *= 1.5
air_quality_df.loc[winter_mask, 'no2'] *= 1.3

# Summer months (Mar, Apr, May) have moderate pollution
summer_mask = air_quality_df['month'].isin([3, 4, 5])
air_quality_df.loc[summer_mask, 'pm25'] *= 0.8
air_quality_df.loc[summer_mask, 'no2'] *= 0.9

print("üìä Dataset Overview:")
print("-" * 30)

# 1. Basic Data Exploration
print("Dataset Shape:", air_quality_df.shape)
print("\nFirst 5 rows:")
print(air_quality_df.head())
print("\nDataset Info:")
print(air_quality_df.info())
print("\nStatistical Summary:")
print(air_quality_df.describe())

print("\n" + "="*50)
print("üìà ANALYSIS RESULTS")
print("="*50)

# 2. PM2.5 Analysis
print("\n1. üîç PM2.5 Analysis:")
print("-" * 25)
average_pm25 = air_quality_df['pm25'].mean()
print(f"Average PM2.5 across all cities: {average_pm25:.1f} Œºg/m¬≥")

# WHO guideline for PM2.5 is 15 Œºg/m¬≥ annual mean
if average_pm25 > 15:
    print(f"‚ö†Ô∏è  Alert: Average PM2.5 ({average_pm25:.1f}) exceeds WHO guideline (15 Œºg/m¬≥)")
else:
    print(f"‚úÖ Average PM2.5 is within WHO guidelines")

# 3. City with Highest NO2 Levels
print("\n2. üèôÔ∏è  City Analysis:")
print("-" * 20)
city_avg_no2 = air_quality_df.groupby('city')['no2'].mean().sort_values(ascending=False)
city_highest_no2 = city_avg_no2.index[0]
highest_no2_value = city_avg_no2.iloc[0]
print(f"City with highest average NO2 levels: {city_highest_no2} ({highest_no2_value:.1f} Œºg/m¬≥)")

# Top 3 most polluted cities by PM2.5
city_avg_pm25 = air_quality_df.groupby('city')['pm25'].mean().sort_values(ascending=False)
print(f"\nTop 3 most polluted cities (PM2.5):")
for i, (city, pm25) in enumerate(city_avg_pm25.head(3).items(), 1):
    print(f"  {i}. {city}: {pm25:.1f} Œºg/m¬≥")

# 4. Correlation between Pollutants
print("\n3. üîó Pollutant Correlations:")
print("-" * 30)
correlation_pm25_no2 = air_quality_df['pm25'].corr(air_quality_df['no2'])
correlation_pm25_so2 = air_quality_df['pm25'].corr(air_quality_df['so2'])
correlation_no2_so2 = air_quality_df['no2'].corr(air_quality_df['so2'])

print(f"Correlation between PM2.5 and NO2: {correlation_pm25_no2:.3f}")
print(f"Correlation between PM2.5 and SO2: {correlation_pm25_so2:.3f}")
print(f"Correlation between NO2 and SO2: {correlation_no2_so2:.3f}")

# Interpret correlations
def interpret_correlation(corr_value):
    if abs(corr_value) > 0.7:
        return "Strong"
    elif abs(corr_value) > 0.5:
        return "Moderate"
    elif abs(corr_value) > 0.3:
        return "Weak"
    else:
        return "Very weak"

print(f"\nCorrelation Strength:")
print(f"  PM2.5-NO2: {interpret_correlation(correlation_pm25_no2)}")
print(f"  PM2.5-SO2: {interpret_correlation(correlation_pm25_so2)}")
print(f"  NO2-SO2: {interpret_correlation(correlation_no2_so2)}")

# 5. Seasonal Analysis
print("\n4. üå¶Ô∏è  Seasonal Patterns:")
print("-" * 25)
seasonal_data = air_quality_df.groupby('month')[['pm25', 'no2', 'so2']].mean()
seasons = {
    'Winter (Dec-Feb)': [12, 1, 2],
    'Spring (Mar-May)': [3, 4, 5],
    'Summer (Jun-Aug)': [6, 7, 8],
    'Monsoon (Sep-Nov)': [9, 10, 11]
}

for season, months in seasons.items():
    season_data = air_quality_df[air_quality_df['month'].isin(months)]
    if not season_data.empty:
        avg_pm25 = season_data['pm25'].mean()
        avg_no2 = season_data['no2'].mean()
        print(f"{season}: PM2.5={avg_pm25:.1f}, NO2={avg_no2:.1f}")

print("\n" + "="*50)
print("üìä VISUALIZATIONS")
print("="*50)

# Create visualizations
fig = plt.figure(figsize=(20, 15))

# 1. Bar Chart of PM2.5 Levels by City
plt.subplot(3, 3, 1)
city_pm25_avg = air_quality_df.groupby('city')['pm25'].mean().sort_values(ascending=False)
bars = plt.bar(range(len(city_pm25_avg)), city_pm25_avg.values, color='red', alpha=0.7)
plt.title('Average PM2.5 Levels by City', fontsize=14, fontweight='bold')
plt.xlabel('Cities')
plt.ylabel('PM2.5 (Œºg/m¬≥)')
plt.xticks(range(len(city_pm25_avg)), city_pm25_avg.index, rotation=45)
plt.axhline(y=15, color='orange', linestyle='--', label='WHO Guideline (15)')
plt.legend()
plt.grid(axis='y', alpha=0.3)

# Add value labels on bars
for bar, value in zip(bars, city_pm25_avg.values):
    plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 5, 
             f'{value:.0f}', ha='center', va='bottom', fontweight='bold')

# 2. Scatter Plot of PM2.5 vs. NO2
plt.subplot(3, 3, 2)
plt.scatter(air_quality_df['pm25'], air_quality_df['no2'], alpha=0.6, c='blue')
plt.title('PM2.5 vs NO2 Relationship', fontsize=14, fontweight='bold')
plt.xlabel('PM2.5 (Œºg/m¬≥)')
plt.ylabel('NO2 (Œºg/m¬≥)')
plt.grid(True, alpha=0.3)

# Add trend line
z = np.polyfit(air_quality_df['pm25'], air_quality_df['no2'], 1)
p = np.poly1d(z)
plt.plot(air_quality_df['pm25'], p(air_quality_df['pm25']), "r--", alpha=0.8)

# 3. Time series plot (Monthly trends)
plt.subplot(3, 3, 3)
monthly_avg = air_quality_df.groupby('month')[['pm25', 'no2', 'so2']].mean()
plt.plot(monthly_avg.index, monthly_avg['pm25'], marker='o', label='PM2.5', linewidth=2)
plt.plot(monthly_avg.index, monthly_avg['no2'], marker='s', label='NO2', linewidth=2)
plt.plot(monthly_avg.index, monthly_avg['so2'], marker='^', label='SO2', linewidth=2)
plt.title('Monthly Pollutant Trends', fontsize=14, fontweight='bold')
plt.xlabel('Month')
plt.ylabel('Concentration (Œºg/m¬≥)')
plt.legend()
plt.grid(True, alpha=0.3)

# 4. Heatmap of correlations
plt.subplot(3, 3, 4)
correlation_matrix = air_quality_df[['pm25', 'no2', 'so2']].corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0, 
            square=True, fmt='.2f', cbar_kws={'shrink': 0.8})
plt.title('Pollutant Correlation Heatmap', fontsize=14, fontweight='bold')

# 5. Box plot showing distribution by city
plt.subplot(3, 3, 5)
air_quality_df.boxplot(column='pm25', by='city', ax=plt.gca())
plt.title('PM2.5 Distribution by City', fontsize=14, fontweight='bold')
plt.suptitle('')  # Remove automatic title
plt.xticks(rotation=45)
plt.ylabel('PM2.5 (Œºg/m¬≥)')

# 6. Seasonal comparison
plt.subplot(3, 3, 6)
season_mapping = {1: 'Winter', 2: 'Winter', 3: 'Spring', 4: 'Spring', 5: 'Spring',
                  6: 'Summer', 7: 'Summer', 8: 'Summer', 9: 'Monsoon', 10: 'Monsoon', 11: 'Monsoon', 12: 'Winter'}
air_quality_df['season'] = air_quality_df['month'].map(season_mapping)
seasonal_avg = air_quality_df.groupby('season')[['pm25', 'no2', 'so2']].mean()

x = range(len(seasonal_avg.index))
width = 0.25
plt.bar([i - width for i in x], seasonal_avg['pm25'], width, label='PM2.5', alpha=0.8)
plt.bar(x, seasonal_avg['no2'], width, label='NO2', alpha=0.8)
plt.bar([i + width for i in x], seasonal_avg['so2'], width, label='SO2', alpha=0.8)
plt.title('Seasonal Pollutant Comparison', fontsize=14, fontweight='bold')
plt.xlabel('Season')
plt.ylabel('Concentration (Œºg/m¬≥)')
plt.xticks(x, seasonal_avg.index)
plt.legend()
plt.grid(axis='y', alpha=0.3)

# 7. Top polluted cities ranking
plt.subplot(3, 3, 7)
top_cities = city_pm25_avg.head(5)
colors = ['red', 'orange', 'yellow', 'lightgreen', 'green']
plt.barh(range(len(top_cities)), top_cities.values, color=colors)
plt.title('Top 5 Most Polluted Cities (PM2.5)', fontsize=14, fontweight='bold')
plt.xlabel('PM2.5 (Œºg/m¬≥)')
plt.yticks(range(len(top_cities)), top_cities.index)
plt.grid(axis='x', alpha=0.3)

# 8. Pollution level categories
plt.subplot(3, 3, 8)
def categorize_pollution(pm25):
    if pm25 <= 30:
        return 'Good'
    elif pm25 <= 60:
        return 'Moderate'
    elif pm25 <= 90:
        return 'Unhealthy for Sensitive'
    elif pm25 <= 120:
        return 'Unhealthy'
    else:
        return 'Very Unhealthy'

air_quality_df['pollution_category'] = air_quality_df['pm25'].apply(categorize_pollution)
category_counts = air_quality_df['pollution_category'].value_counts()
plt.pie(category_counts.values, labels=category_counts.index, autopct='%1.1f%%', startangle=90)
plt.title('Air Quality Categories Distribution', fontsize=14, fontweight='bold')

# 9. Daily variation simulation
plt.subplot(3, 3, 9)
# Create hourly data for one day
hours = range(24)
daily_pm25 = [80 + 20*np.sin((h-6)*np.pi/12) + np.random.normal(0, 5) for h in hours]
daily_no2 = [45 + 15*np.sin((h-8)*np.pi/12) + np.random.normal(0, 3) for h in hours]

plt.plot(hours, daily_pm25, marker='o', label='PM2.5', linewidth=2)
plt.plot(hours, daily_no2, marker='s', label='NO2', linewidth=2)
plt.title('Daily Pollution Pattern (Sample)', fontsize=14, fontweight='bold')
plt.xlabel('Hour of Day')
plt.ylabel('Concentration (Œºg/m¬≥)')
plt.legend()
plt.grid(True, alpha=0.3)
plt.xticks(range(0, 24, 4))

plt.tight_layout()
plt.show()

print("\n" + "="*50)
print("üìã SUMMARY REPORT")
print("="*50)

print(f"""
üîç KEY FINDINGS:
‚Ä¢ Dataset contains {len(air_quality_df)} records across {air_quality_df['city'].nunique()} cities
‚Ä¢ Average PM2.5 level: {average_pm25:.1f} Œºg/m¬≥ (WHO guideline: 15 Œºg/m¬≥)
‚Ä¢ Most polluted city (NO2): {city_highest_no2} ({highest_no2_value:.1f} Œºg/m¬≥)
‚Ä¢ Strongest correlation: PM2.5-NO2 ({correlation_pm25_no2:.3f})

‚ö†Ô∏è  HEALTH IMPLICATIONS:
‚Ä¢ {len(air_quality_df[air_quality_df['pm25'] > 60])} records show unhealthy PM2.5 levels
‚Ä¢ {len(air_quality_df[air_quality_df['no2'] > 80])} records show high NO2 levels

üìä DATA QUALITY:
‚Ä¢ No missing values detected
‚Ä¢ Data spans multiple months for trend analysis
‚Ä¢ All major pollutants (PM2.5, NO2, SO2) included

üéØ RECOMMENDATIONS:
1. Focus on winter pollution control measures
2. Monitor {city_highest_no2} for NO2 reduction strategies  
3. Implement real-time air quality monitoring
4. Correlate with weather data for better predictions
""")

print("\n‚úÖ Analysis Complete! All EDA objectives achieved:")
print("1. ‚úì Analyzed trends in air pollutants (PM2.5, NO2, SO2) over time")
print("2. ‚úì Compared air quality across different cities") 
print("3. ‚úì Identified seasonal patterns and correlations")
print("4. ‚úì Visualized pollution levels using multiple plot types")
